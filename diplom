# coding: utf-8
#!/usr/bin/python

from tkMessageBox import *
from Tkinter import *
from tkFileDialog import *
from tkSimpleDialog import askstring
from tkFileDialog   import asksaveasfilename
from tkMessageBox import askokcancel
import fileinput
import re
import sys
import ttk

root = Tk()
root.title("Triple Modular Redundancy")
root.geometry("800x600")

class StatusBar(Frame):
    def __init__(self, parent=None):
        Frame.__init__(self, parent=None)
        self.label = Label(self, bd=15, relief=SUNKEN, anchor=W, text="Open verilog file. Press TMR and choose 'Y'es or 'N'o.")
        self.label.pack(fill=X)
        progressbar = ttk.Progressbar(orient=HORIZONTAL, length=500, mode='determinate', variable=100, maximum=1000)
        progressbar.pack(side="bottom")
        progressbar.start()

    def set(self, format, *args):
        self.label.config(text=format % args)
        self.label.update_idletasks()

    def clear(self):
        self.label.config(text="")
        self.label.update_idletasks()

class Quitter(Frame):                        
    def __init__(self, parent=None):          
        Frame.__init__(self, parent)
        self.pack()
        widget = Button(self, text='Quit', command=self.quit)
        widget.pack(expand=YES, fill=BOTH, side=LEFT)
    def quit(self):
        ans = askokcancel('Verify exit', "Really quit?")
        if ans: Frame.quit(self)


class ScrolledText(Frame):
    def __init__(self, parent=None, text='', file=None):
        Frame.__init__(self, parent)
        self.pack(expand=YES, fill=BOTH, padx = 20, pady = 20)               
        self.makewidgets()
    def makewidgets(self):
        status = StatusBar(ScrolledText)
        sbar = Scrollbar(self)
        text = Text(self, wrap=WORD)
        sbar.config(command=text.yview)                  
        text.config(yscrollcommand=sbar.set)           
        sbar.pack(side=RIGHT, fill=Y)                   
        text.pack(side=LEFT, expand=YES, fill=BOTH)
        status.pack(side=BOTTOM, fill=BOTH)
        self.text = text                  
    def gettext(self):                               
        return self.text.get('1.0', END+'-1c')         

class SimpleEditor(ScrolledText):                        
    def __init__(self, parent=None, file=None, data = []): 
        frm = Frame(root)
        frm.pack(fill=X)
        Button(frm, text='Save as',  command=self.onSave).pack(side=LEFT)
        Button(frm, text='Open', command=self.onOpen).pack(side=LEFT)
        Button(frm, text='About',  command=self.onAbout).pack(side=LEFT)
        Button(frm, text='Search_Peremen',  command=self.onSearchP).pack(side=LEFT)
        Button(frm, text='TMR',  command=self.onTMR ).pack(side=LEFT)
        Quitter(frm).pack(side=LEFT)
        ScrolledText.__init__(self, parent, file=file)
        self.text.config(font=('courier', 15, 'normal'))
        self.mark_line_id = 0
        self.sum_pastit = []
        self.text.bind("q", self.callback)
        self.text.pack()
    
    def callback(self, event):
        to_mark = self.sum_pastit[self.mark_line_id]
        print "to_mark =", to_mark
        pattern = '([0-9]+\.0)\+'
        to_mark_id = re.findall(pattern,to_mark)[0]
        print "to_mark_id =", to_mark_id
        self.text.tag_remove(SEL, '1.0', END)
        #self.text.mark_set(INSERT, to_mark)    
        self.text.tag_add(SEL, to_mark_id, to_mark)     
        #self.text.get('1.0', END)      
        self.text.see(INSERT)
        self.mark_line_id = self.mark_line_id + 1 % len(self.sum_pastit)

    def onSave(self):
        filename = asksaveasfilename()
        if filename:
            alltext = self.gettext()                      
            open(filename, 'w').write(alltext)

    def onOpen(self):                                    
        file = askopenfile(mode='r',title='Choose file')
        if file != None:
            self.Out(file)
        return file

    def Out(self, file):
        self.data = file.read().split('\n')
        tmp = "\n".join(self.data)
        #print "self.data= ", self.data
        #print "tmp= ", tmp
        self.text.delete('1.0', END)
        for lines in tmp:                   
            self.text.insert(END, lines)                  
            self.text.mark_set(INSERT, '1.0')              
            self.text.focus()
        return self.data

    def onSearchP(self):
        sum_search_peremen = []
        for lines in self.data:
            pattern = ('(reg *)([\[\d\:\d\]]*) +([\w]+) *;')
            found = re.findall(pattern,lines)
            if found:
                for j in range(1,4):
                    search_peremen = found[0][0] + found[0][1] + " " + found[0][-1] + "_seu" + str(j) + ";"
                    sum_search_peremen.append(search_peremen)
        print "sum_search_peremen= ", sum_search_peremen
     
    def search_trig(self):
        self.mark_line_id = 0
        line_id = 1
        self.data = self.data.split('\n')
        for lines in self.data:
            pattern = 'always *\@\ *\(\ *posedge .*\)|negedge .*\)'
            found = re.findall(pattern,lines)
            print "found =", found
            print lines
            for i in found:                                   
                pastit = str(float(line_id)) + ('+%dc' % len(i))
                print "pastit =", pastit, type(pastit)
                self.sum_pastit.append(pastit)
            line_id +=1
        print "self.sum_pastit =", self.sum_pastit

    def onTMR(self):
        self.data = self.clear_comments()
        self.text.delete('1.0', END)
        for lines in self.data:  
            self.text.insert(END, lines)                  
            self.text.mark_set(INSERT, '1.0')              
            # self.text.focus()
        self.search_trig()
                    
    def clear_comments(self):
        sum_found = ""
        pattern = '/{2}[^\n]*|\/*\*[\w\W]*?\*\/'
        for lines in self.data:
            found = re.sub(pattern,"", lines)
            sum_found += found + '\n'
        return sum_found


    def onAbout(self):
        showinfo("Vladimir Soloviev","               This is TMR editor.\nTMR is a fault- tolerant form of N-modular redundancy, in which three systems perform a process \
and that result is processed by a majority-voting system to produce a single output.\
If any one of the three systems fails, the other two systems can correct and mask the fault.\
                                    \n(test version) \n MIET \n 2015")                       

if __name__ == '__main__':
    try:
        SimpleEditor(file=sys.argv[1]).mainloop()   
    except IndexError:
        SimpleEditor().mainloop()
