# coding: utf-8
#!/usr/bin/python

from tkMessageBox import * #подключение дополнительных модулей
from Tkinter import *
from tkFileDialog import *
from tkSimpleDialog import askstring
from tkFileDialog   import asksaveasfilename
from tkMessageBox import askokcancel
import fileinput
import re
import sys
import ttk

root = Tk()
root.title("Triple Modular Redundancy")
root.geometry("1024x768")
special_words = ['always', 'wire', ' reg ','assign', 'endmodule', 'initial', 'parameter'] #список слов, перед которыми может заканчиваться описание триггера

class StatusBar(Frame):
    def __init__(self, parent=None):
        Frame.__init__(self, parent=None)
        self.label = Label(self, bd=15, relief=SUNKEN, anchor=W, text="Откройте файл (.v). Нажмите ПОИСК ТРИГГЕРОВ и выберете нужный триггер кнопкой <ВНИЗ>, затем нажмите СТАРТ TMR.")
        self.label.pack(fill=X)

    def set(self, format, *args):
        self.label.config(text=format % args)
        self.label.update_idletasks()

    def clear(self):
        self.label.config(text="")
        self.label.update_idletasks()

        #widget = Button(self, text='Quit', command=self.quit)
        #widget.pack(expand=YES, fill=BOTH, side=LEFT)


class ScrolledText(Frame):
    def __init__(self, parent=None, text='', file=None):
        Frame.__init__(self, parent)
        self.pack(expand=YES, fill=BOTH, padx = 15, pady = 10)
        self.progressbar = ttk.Progressbar(orient=HORIZONTAL, length=500, mode='determinate', variable=100, maximum=200)
        self.progressbar.pack(side="bottom")               
        self.makewidgets()
    def makewidgets(self):
        status = StatusBar(ScrolledText)
        sbar = Scrollbar(self)
        text = Text(self, wrap=WORD)
        sbar.config(command=text.yview)                  
        text.config(yscrollcommand=sbar.set)           
        sbar.pack(side=RIGHT, fill=Y)                   
        text.pack(side=LEFT, expand=YES, fill=BOTH)
        status.pack(side=BOTTOM, fill=BOTH)
        self.text = text                  
    def gettext(self): #получение текста с рабочей области программы                               
        return self.text.get('1.0', END+'-1c')         

class SimpleEditor(ScrolledText):                        
    def __init__(self, parent=None, file=None, data = []): 
        frm = Frame(root)
        frm.pack(fill=X)
        Button(frm, text='Открыть', command=self.onOpen).pack(side=LEFT) #создание кнопок на рабочей области программы
        Button(frm, text='Сохранить как',  command=self.onSave).pack(side=LEFT)
        Button(frm, text='Выход',  command=self.onQuit ).pack(side=LEFT)
        Button(frm, text='Инфо',  command=self.onAbout).pack(side=LEFT)
        Button(frm, text='Поиск регистров',  command=self.onSearchReg).pack(side=RIGHT)
        Button(frm, text='Поиск триггеров',  command=self.onSearchTrig ).pack(side=RIGHT)
        Button(frm, text='Старт TMR',  command=self.onTMR ).pack(side=RIGHT)
        Button(frm, text='Удалить комментарии',  command=self.onClearComments ).pack(side=RIGHT)
        ScrolledText.__init__(self, parent, file=file)
        self.text.tag_config("a", background="blue", foreground="white")
        self.text.config(font=('courier', 15, 'normal'))
        self.mark_line_id = 0 #номер строки
        self.sum_pastit = [] #индексы нахождения описаний триггеров
        self.line_id = 1 #отсчет строк начинается с 1.0
        self.text.bind("<Down>", self.callback) #вызов следующего триггера
        self.text.bind("<Up>", self.reverse_callback) # и предыдущего
        self.text.pack()
    
    def callback(self, event): #функция вызова следующего триггера
        to_mark = self.sum_pastit[self.mark_line_id]
        print "to_mark =", to_mark
        pattern = '([0-9]+\.0)\+'
        self.to_mark_id = re.findall(pattern, to_mark)[0]
        print "self.to_mark_id =", self.to_mark_id
        print "self.mark_line_id =", self.mark_line_id
        self.text.tag_remove("a", '1.0', END)
        self.text.mark_set(INSERT, to_mark)    
        self.text.tag_add("a", self.to_mark_id, to_mark)     
        #self.text.get('1.0', END)      
        self.text.see(INSERT)
        self.mark_line_id = (self.mark_line_id + 1) % len(self.sum_pastit)
        return self.to_mark_id

    def reverse_callback(self, event): #функция вызова предыдущего триггера
        to_mark = self.sum_pastit[self.mark_line_id]
        print "to_mark =", to_mark
        pattern = '([0-9]+\.0)\+'
        self.to_mark_id = re.findall(pattern,to_mark)[0]
        print "self.to_mark_id =", self.to_mark_id
        print "self.mark_line_id =", self.mark_line_id
        self.text.tag_remove("a", '1.0', END)
        self.text.mark_set(INSERT, to_mark)    
        self.text.tag_add("a", self.to_mark_id, to_mark)     
        #self.text.get('1.0', END)      
        self.text.see(INSERT)
        self.mark_line_id = (self.mark_line_id - 1) % len(self.sum_pastit)
        return self.to_mark_id

    def Out(self, file): #функция вывода текста на рабочую область программы
        self.data = file.read().split('\n')
        tmp = "\n".join(self.data)
        self.text.delete('1.0', END)
        for lines in tmp:                   
            self.text.insert(END, lines)                  
            self.text.mark_set(INSERT, '1.0')              
            self.text.focus()
        return self.data

    def unique(self, found): #преобразование переменных к нужному виду
        seen = set()
        result = []
        for x in found:
            if x in seen:
                continue
            seen.add(x)
            result.append(x)
        return result

#:::::::::::::::::::::::::: Функции, назначенные на кнопки :::::::::::::::::::::::::::::

    def onSearchTrig(self): #функция для нахождения полного описания триггера и его индексов
        self.sum_pastit = []
        self.mark_line_id = 0
        self.progressbar.start()
        if type(self.data) != list:
            self.data = self.data.split("\n")
        #print "self.line_id ===", self.line_id
        #print "self.data =", self.data
        for n in range(self.line_id, len(self.data)):
            pattern = 'always *\@\ *\(\ *posedge .*\)|negedge .*\)'
            found = re.findall(pattern, self.data[n])
            #print "found =", found
            print self.data[n]
            for i in found:                                   
                pastit = str(float(self.line_id) + 1.0) + ('+%dc' % len(i))
                #print "pastit =", pastit, type(pastit)
                self.sum_pastit.append(pastit)
            self.line_id += 1
        print "self.sum_pastit =", self.sum_pastit
        return self.line_id

    def onQuit(self): #функция для осуществления выхода из программы
        ans = askokcancel('Выход', "Вы действительно хотите выйти?")
        if ans: Frame.quit(self)

    def onSave(self): #функция сохранения преобразованного файла
        filename = asksaveasfilename()
        if filename:
            alltext = self.gettext()                      
            open(filename, 'w').write(alltext)

    def onOpen(self): #функция открытия файла                                    
        file = askopenfile(mode='r',title='Choose file')
        if file != None:
            self.Out(file)
        return file

    def onSearchReg(self): #функция поиска всех регистров в файле
        sum_search_peremen = []
        for lines in self.data:
            pattern = ('(reg *)([\[\d\:\d\]]*) +([\w]+) *;') #паттерн для нахождения регистров в файле
            found = re.findall(pattern,lines)
            if found:
                for j in range(1,4):
                    search_peremen = found[0][0] + found[0][1] + " " + found[0][-1] + "_seu" + str(j) + ";"
                    sum_search_peremen.append(search_peremen)
        print "sum_search_peremen= ", sum_search_peremen
        for i in range(len(sum_search_peremen)):
            self.text.mark_set(INSERT, '1.0')
            self.text.insert(INSERT, sum_search_peremen[i] + "\n")
            self.text.see(INSERT)
            self.data = self.gettext()
        return self.data

    def onClearComments(self): #функция очистки файла от комментариев
        sum_found = ""
        pattern = '/{2}[^\n]*|\/*\*[\w\W]*?\*\/'
        for lines in self.data:
            found = re.sub(pattern, "", lines)
            sum_found += found + '\n'
        self.data = sum_found
        self.text.delete('1.0', END)
        for lines in self.data:  
            self.text.insert(END, lines)                  
            self.text.mark_set(INSERT, '1.0')
        self.data = self.data.split("\n")
        return self.data

    def onTMR(self): #основная функция, в которой используется метод тройного резервирования
        found_hard_reg = ""
        sum_found_reg = ""
        sum_full_copy = ""
        full_copy = ""
        found = []
        k = 0
        for i in range(int(float(self.to_mark_id)), len(self.data)):
            for j in range(len(special_words)):
                if (special_words[j] in self.data[i]) or (self.data[i].startswith('reg')): #нахождение конца описания триггера
                    content = str(float(i))
                    content_plus = str(float(i) - 1.0) + ('+%dc' % len(self.data[i]))
                    #print "content= ", content
                    copy = ""
                    copy += str(self.text.get(self.to_mark_id, content) + "\n") #полное описание триггера
                    #print "copy =", copy
                    pattern = '(\w+)\s*\<=(?:.*)\;' #паттерн для получения списка(found[]) c регистрами
                    pattern1 ='(\s*)<=(?!.*\).*\;)' #паттерн для нахождения простых регистров внутри триггера
                    pattern2 = '(\s*)<=(?=.*\(.*\;)(?=.*\;)' #паттерн для нахождения регистров со скобками внутри триггера
                    pattern3 = '\{(.*)\}[\s*<=]' #паттерн для нахождения регистров в фигурных скобках внутри триггера 
                    hard_reg = re.findall(pattern3, copy)
                    if hard_reg:
                        hard_reg = self.unique(hard_reg)
                        hard_reg = hard_reg[0].split(", ")
                    found = re.findall(pattern, copy)
                    found = self.unique(found) #изменение условия для обработки различных случаев
                    if "{" and "}" in copy: #условие для поиска конкантенации регистров
                        found = hard_reg
                        print "found ====", found
                        for c in range(1,4):
                            found_hard_reg = ""
                            for x in range(len(found)):
                                found_hard_reg += found[x].rstrip() + "_seu" + str(c) + ", "
                            new_found_hard_reg = "{" + found_hard_reg.rstrip(', ') + "}"
                            found_reg = re.sub(pattern3, new_found_hard_reg, copy)
                            sum_found_reg += found_reg
                    else: #продолжение
                        for n in range(1,4):
                            found_reg1 = re.sub(pattern2, "_seu" + str(n) + " <=", copy)
                            found_reg = re.sub(pattern1, "_seu" + str(n) + " <=", found_reg1)
                            sum_found_reg += found_reg
                    while k < len(found): #добавление мажоритарной логики
                        full_copy += "always @ (*)" + "\n" + found[k].rstrip() + " = (" + found[k].rstrip() + "_seu1 & " + found[k].rstrip() + "_seu2) | (" + found[k].rstrip() + "_seu1 & " + found[k].rstrip() + "_seu3) | (" + found[k].rstrip() + "_seu2 & " + found[k].rstrip() + "_seu3);" + "\n" + "\n"
                        k += 1
                    sum_full_copy += sum_found_reg + "\n" + full_copy + "\n"
                    self.text.delete(self.to_mark_id, content) #очистка рабочей области программы от текста
                    self.text.insert(INSERT, sum_full_copy) #вставка текста на рабочую область программы
                    self.data = self.gettext() #сохранение текста из рабочей области программы в переменную self.data
                    xy = self.text.index(INSERT)
                    self.line_id = int(float(xy)) #индекс последнего положения курсора
                    self.text.tag_add("a", self.to_mark_id, xy) #выделение изменений на экране
                    return found

                    next()

    def onAbout(self): #открытие окна с информацией о программе
        showinfo("Vladimir Soloviev","               This is TMR editor.\nTMR is a fault- tolerant form of N-modular redundancy, in which three systems perform a process \
and that result is processed by a majority-voting system to produce a single output.\
If any one of the three systems fails, the other two systems can correct and mask the fault.\
                                    \n(test version) \n MIET \n 2015")                       

if __name__ == '__main__': #обработка исключений
    try:
        SimpleEditor(file=sys.argv[1]).mainloop()   
    except IndexError:
        SimpleEditor().mainloop()
